diff --git a/node_modules/level-ts/dist/LevelGraph.d.ts b/node_modules/level-ts/dist/LevelGraph.d.ts
index a208b1e..a5a9e17 100644
--- a/node_modules/level-ts/dist/LevelGraph.d.ts
+++ b/node_modules/level-ts/dist/LevelGraph.d.ts
@@ -5,6 +5,7 @@ export declare class LevelGraph<StaticPredicates extends TripleInput = string> i
     static rootFolder: string;
     static setRoot(path: string): void;
     private DB;
+    constructor(database: object);
     constructor(path: string);
     v(name: string): WalkVariable;
     walk<T = any>(...strolls: Array<IStroll<StaticPredicates>>): Promise<T[]>;
diff --git a/node_modules/level-ts/dist/LevelGraph.js b/node_modules/level-ts/dist/LevelGraph.js
index 4038225..38b7bdc 100644
--- a/node_modules/level-ts/dist/LevelGraph.js
+++ b/node_modules/level-ts/dist/LevelGraph.js
@@ -16,11 +16,19 @@ const Level_1 = __importDefault(require("./Level"));
 const Walking_1 = __importStar(require("./Walking"));
 const instances = {};
 class LevelGraph {
-    constructor(path) {
-        const fullpath = path_1.isAbsolute(path) ? path : path_1.resolve(LevelGraph.rootFolder, path);
-        this.DB = instances[fullpath]
-            ? instances[fullpath]
-            : instances[fullpath] = new Level_1.default(fullpath);
+    constructor(argument) {
+        if (typeof argument === 'string') {
+            const fullpath = path_1.isAbsolute(argument) ? argument : path_1.resolve(LevelGraph.rootFolder, argument);
+            this.DB = instances[fullpath]
+                ? instances[fullpath]
+                : instances[fullpath] = new Level_1.default(fullpath);
+        }
+        else if (!!argument.get && !!argument.put && !!argument.createReadStream && !!argument.del) {
+            this.DB = new Level_1.default(argument);
+        }
+        else {
+            throw new Error('No valid database instance or path provided');
+        }
     }
     get chain() {
         // tslint:disable-next-line: no-this-assignment
