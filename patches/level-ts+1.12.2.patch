diff --git a/node_modules/level-ts/dist/LevelGraph.d.ts b/node_modules/level-ts/dist/LevelGraph.d.ts
index 26f162e..d382e2e 100644
--- a/node_modules/level-ts/dist/LevelGraph.d.ts
+++ b/node_modules/level-ts/dist/LevelGraph.d.ts
@@ -1,19 +1,19 @@
-declare type TripleInp = string | number;
-interface ITripleBase {
+export declare type TripleInp = string | number;
+export interface ITripleBase {
     subject: TripleInp;
     predicate: TripleInp;
     object: TripleInp;
 }
-interface ITriple<Predicates extends TripleInp> extends ITripleBase {
+export interface ITriple<Predicates extends TripleInp> extends ITripleBase {
     predicate: Predicates;
     [key: string]: any;
 }
-interface IGetTriple<Predicates extends TripleInp> extends Partial<ITriple<Predicates>> {
+export interface IGetTriple<Predicates extends TripleInp> extends Partial<ITriple<Predicates>> {
     limit?: number;
     offset?: number;
     reverse?: boolean;
 }
-interface IChainObject<Predicates extends TripleInp> {
+export interface IChainObject<Predicates extends TripleInp> {
     put(triple: ITriple<Predicates>): IChainObject<Predicates>;
     del(triple: ITriple<Predicates>): IChainObject<Predicates>;
     get(triple: IGetTriple<Predicates>): IChainObject<Predicates>;
@@ -23,6 +23,7 @@ export declare class LevelGraph<StaticPredicates extends TripleInp = string | nu
     static rootFolder: string;
     static setRoot(path: string): void;
     private DB;
+    constructor(database: object);
     constructor(path: string);
     readonly chain: IChainObject<StaticPredicates>;
     put(subject: string | number, predicate: StaticPredicates, object: string): Promise<void>;
@@ -35,8 +36,8 @@ export declare class LevelGraph<StaticPredicates extends TripleInp = string | nu
         [key: string]: any;
     }>>;
 }
-declare type GraphVar = any;
-interface IWalkOptions {
+export declare type GraphVar = any;
+export interface IWalkOptions {
     /**Maximum of results */
     limit?: number;
     /**First to skip (Pagination)*/
@@ -46,7 +47,7 @@ interface IWalkOptions {
     };
     filter?: (solution: any, callback: (error: string | null, solution?: any) => void) => void;
 }
-interface IWalkPath<Predicates extends TripleInp> {
+export interface IWalkPath<Predicates extends TripleInp> {
     subject: string | GraphVar;
     predicate: string | GraphVar;
     object: string | GraphVar;
diff --git a/node_modules/level-ts/dist/LevelGraph.js b/node_modules/level-ts/dist/LevelGraph.js
index 36395a8..b994461 100644
--- a/node_modules/level-ts/dist/LevelGraph.js
+++ b/node_modules/level-ts/dist/LevelGraph.js
@@ -7,11 +7,19 @@ const path_1 = require("path");
 const level = require('level'), levelgraph = require('levelgraph');
 const instances = {};
 class LevelGraph {
-    constructor(path) {
-        const fullpath = path_1.isAbsolute(path) ? path : path_1.resolve(LevelGraph.rootFolder, path);
+    constructor(argument) {
+      if (typeof argument === 'string') {
+        const fullpath = path_1.isAbsolute(argument) ? argument : path_1.resolve(LevelGraph.rootFolder, argument);
         this.DB = instances[fullpath]
             ? instances[fullpath]
             : instances[fullpath] = levelgraph(level(fullpath));
+      }
+      else if (!!argument.get && !!argument.put && !!argument.createReadStream && !!argument.del) {
+        this.DB = levelgraph(argument);
+      }
+      else {
+        throw new Error('No valid database instance or path provided');
+      }
     }
     static setRoot(path) {
         this.rootFolder = path;
